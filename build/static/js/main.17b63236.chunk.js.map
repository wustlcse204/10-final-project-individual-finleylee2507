{"version":3,"sources":["components/StudySets/StudySetItem.module.css","components/StudySets/ViewSet.module.css","components/ui/Modal.module.css","components/layout/MainNavigation.module.css","components/ui/Card.module.css","components/ui/Backdrop.module.css","components/StudySets/StudySetList.module.css","components/layout/Layout.module.css","storage/customHooks.js","storage/favorites-context.js","components/ui/Card.js","components/ui/Modal.js","components/ui/Backdrop.js","components/ui/Delete.js","pages/AllStudySets.js","storage/current-set-context.js","components/StudySets/StudySetItem.js","components/StudySets/StudySetList.js","pages/Favorites.js","components/layout/MainNavigation.js","components/layout/Layout.js","components/StudySets/FlashcardForm.js","pages/NewSet.js","components/StudySets/ViewSet.js","pages/EditSet.js","components/StudySets/FlashcardModeKernel.js","pages/FlashcardMode.js","App.js","index.js","components/StudySets/FlashcardForm.module.css"],"names":["module","exports","usePersistedState","key","defaultValue","React","useState","JSON","parse","localStorage","getItem","state","setState","useEffect","setItem","stringify","FavoritesContext","createContext","favorites","totalFavorites","addFavorite","favoriteSet","removeFavorite","setId","itemIsFavorite","FavoritesContextProvider","props","userFavorites","setUserFavorites","context","length","prevUserFavorites","concat","filter","set","id","some","Provider","value","children","Card","className","classes","card","Modal","modal","cancelButton","onClick","onClickCancel","confirmButton","onClickConfirm","Backdrop","backdrop","Delete","modalIsOpen","setModalIsOpen","onDelete","isLoadingContext","loadedSets","AllStudySetsPage","isLoading","setIsLoading","setLoadedSets","isRerender","setIsRerender","fetch","then","response","json","data","console","log","studysets","studyset","push","CurrentSetContext","currentList","currentTitle","currentDescription","currentImage","currentId","currentIndex","currentMode","updateInfoHandler","list","title","description","image","resetFlashCardMode","previousItemHandler","nextItemHandler","flipHandler","changeCurrentItem","CurrentSetContextProvider","setCurrentList","setCurrentTitle","setCurrentDescription","setCurrentImage","setCurrentId","setCurrentIndex","setCurrentMode","prevCount","previousMode","StudySetItem","useHistory","favoritesCtx","useContext","isLoadingCtx","currentSetCtx","item","src","alt","altImg","content","buttonGroup","actions","to","pathname","method","favoriteBtn","StudySetList","map","FavoritesPage","MainNavigation","header","logo","badge","Layout","main","FlashcardForm","imgurl","term","definition","inputList","setInputList","titleInput","setTitleInput","imageInput","setImageInput","descriptionInput","setDescriptionInput","handleInputChange","e","index","target","name","handleAddClick","form","onSubmit","preventDefault","setData","onAddSet","control","htmlFor","type","placeholder","required","onChange","rows","x","i","counter","buttonBox","removeButton","splice","handleRemoveClick","addButton","submitButton","NewSetPage","history","body","headers","alert","replace","ViewSet","useLocation","termTable","editBtn","studyBtn","EditSetPage","FlashcardModeKernel","currentItem","flipCardAnimation","document","getElementsByClassName","classList","toggle","FlashcardMode","App","exact","path","AllStudySets","NewSet","Favorites","EditSet","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.17b63236.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"StudySetItem_item__2TZrx\",\"image\":\"StudySetItem_image__1cjhh\",\"content\":\"StudySetItem_content__3q3AC\",\"actions\":\"StudySetItem_actions__23imy\",\"favoriteBtn\":\"StudySetItem_favoriteBtn__2hdec\",\"buttonGroup\":\"StudySetItem_buttonGroup__1WD4E\",\"altImg\":\"StudySetItem_altImg__1crsu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"termTable\":\"ViewSet_termTable__2xCXv\",\"actions\":\"ViewSet_actions__2P7T5\",\"studyBtn\":\"ViewSet_studyBtn__111n9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modal\":\"Modal_modal__2iEZU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainNavigation_header__i4v2g\",\"logo\":\"MainNavigation_logo__3Fpj4\",\"active\":\"MainNavigation_active__3JirC\",\"badge\":\"MainNavigation_badge__3QUbO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__3uyPT\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backdrop\":\"Backdrop_backdrop__31DHF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"StudySetList_list__1FCPz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Layout_main__2R6of\"};","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\n//citation:https://dev.to/selbekk/persisting-your-react-state-in-9-lines-of-code-9go\r\n\r\nfunction usePersistedState(key, defaultValue) {\r\n    const [state, setState] = React.useState(\r\n      () => JSON.parse(localStorage.getItem(key)) || defaultValue\r\n    );\r\n    useEffect(() => {\r\n      localStorage.setItem(key, JSON.stringify(state));\r\n    }, [key, state]);\r\n    return [state, setState];\r\n  }\r\n\r\n  export default usePersistedState;","import { createContext,useState } from \"react\";\nimport usePersistedState from \"./customHooks\"; \n\n//initializes a react context \n//source: https://reactjs.org/docs/context.html \n//technically don't need any values but easier for vscode autocompletion \nexport const FavoritesContext = createContext({\n    favorites: [],\n    totalFavorites: 0,\n    addFavorite:(favoriteSet)=>{},\n    removeFavorite:(setId)=>{},\n    itemIsFavorite:(setId)=>{}\n});//returns a react component \n\n//main react wrapper class \nexport const FavoritesContextProvider=(props) =>{\n    const [userFavorites,setUserFavorites]=usePersistedState(\"favorites\",[]);\n\n    const addFavoriteHandler =(favoriteSet)=>{\n        setUserFavorites((prevUserFavorites)=>{ //BETTER WAY OF UPDATING STATES (appending on previous)\n            return prevUserFavorites.concat(favoriteSet);\n        })\n    }\n\n    const removeFavoriteHandler=(setId)=>{\n        setUserFavorites(prevUserFavorites=>{\n            return prevUserFavorites.filter(set=>set.id!==setId);\n        })\n    }\n\n    const itemIsFavoriteHandler=(setId)=>{\n        //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some\n        return userFavorites.some(set=>set.id===setId)\n    }\n\n    const context={\n        favorites:userFavorites,\n        totalFavorites:userFavorites.length,\n        addFavorite:addFavoriteHandler,\n        removeFavorite:removeFavoriteHandler,\n        itemIsFavorite:itemIsFavoriteHandler\n    };\n\n    return <FavoritesContext.Provider value={context}>\n        {props.children}\n    </FavoritesContext.Provider>\n}\n\n","import React from 'react'\nimport classes from './Card.module.css'\n\nconst Card = (props) => {\n    return (\n        <div className={classes.card}>\n            {/* holds the children between the opening and closing tag */}\n            {props.children} \n        </div>\n    )\n}\n\nexport default Card\n","import React from 'react'\r\nimport classes from './Modal.module.css'\r\nconst Modal = (props) => {\r\n    return (\r\n        <div className={classes.modal}>\r\n            <p>Are you sure?</p>\r\n            <button className={classes.cancelButton} onClick={props.onClickCancel}>Cancel</button>\r\n            <button className={classes.confirmButton} onClick={props.onClickConfirm}>Confirm</button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal\r\n","import React from 'react'\r\nimport classes from './Backdrop.module.css'\r\nconst Backdrop = ({onClick}) => {\r\n    return (\r\n        <div className={classes.backdrop} onClick={onClick}>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Backdrop\r\n","import React from 'react';\r\nimport Modal from './Modal';\r\nimport Backdrop from './Backdrop';\r\nimport { useState } from 'react';\r\nconst Delete = (props) => {\r\n    const [modalIsOpen, setModalIsOpen] = useState(false); //used to control modal pop up\r\n\r\n    const deleteHandler=()=>{\r\n        setModalIsOpen(true);\r\n       \r\n    }\r\n\r\n    const confirmHandler=()=>{\r\n        setModalIsOpen(false);\r\n        props.onDelete(props.id); //delete the study set\r\n    }\r\n\r\n    const cancelHandler=()=>{\r\n        setModalIsOpen(false);\r\n    }\r\n\r\n    const backDropHandler=()=>{\r\n        setModalIsOpen(false);\r\n    }\r\n    return (\r\n        <div>\r\n            <button onClick={deleteHandler}>Delete</button>\r\n\r\n            {/* only display/render when delete is clicked (modalIsOpen is set to true) */}\r\n            {modalIsOpen && <Modal onClickCancel={cancelHandler} onClickConfirm={confirmHandler}></Modal>}\r\n            {modalIsOpen && <Backdrop onClick={backDropHandler}></Backdrop>}\r\n        </div>\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Delete\r\n","import React from 'react';\nimport { useState, useEffect, createContext } from 'react';\nimport StudySetList from '../components/StudySets/StudySetList';\n\nexport const isLoadingContext = createContext({\n    onDelete: ()=>{},\n    loadedSets:[]\n});\n\nconst AllStudySetsPage = () => {\n    const [isLoading, setIsLoading] = useState(true); //is the page still loading \n    const [loadedSets, setLoadedSets] = useState([]);//all the study sets fetched from the server \n    const [isRerender,setIsRerender]=useState(false); //whether the page needs to be rerendered \n\n    //provide as a context to other classes (StudySetItem)\n    const handleDelete=()=>{\n        setIsRerender(true); //rerender the list after deletion\n    };\n    \n    useEffect(() => {\n        //fetch the data from the database \n        setIsLoading(true);\n        fetch('https://react-meetup-a340c-default-rtdb.firebaseio.com/study-sets.json')\n            .then((response) => {\n\n                return response.json();\n            })\n            .then((data) => { //handle the returned object by firebase \n                console.log(data)\n                const studysets = [];\n\n                for (const key in data) {\n\n                    const studyset = {\n                        id: key,\n                        ...data[key] //copy the rest of the data\n                    }\n                    studysets.push(studyset);\n                }\n                setIsLoading(false); //once the data is here, change loading state \n                setLoadedSets(studysets); //set loaded set \n                setIsRerender(false);\n            });\n\n\n\n    }, [isRerender]);//if empty array, react only exectues useEffect the first time the component is rendered \n    //if we added isRerender, useEffect will run whenever the value of isRerender changes \n   \n    const context={\n        onDelete:handleDelete,\n        loadedSets:loadedSets\n    }\n    return (\n        <div>\n            <h1>Your study sets</h1>\n            {/* note:react can render an array of element with no problem  */}\n            <isLoadingContext.Provider value={context}> {isLoading ? <p>Loading...</p> : <StudySetList studysets={loadedSets} ></StudySetList>}</isLoadingContext.Provider>\n\n        </div>\n    )\n}\n\nexport default AllStudySetsPage\n","import { createContext, useEffect, useState } from \"react\";\r\nimport usePersistedState from \"./customHooks\"; \r\n\r\nexport const CurrentSetContext = createContext({\r\n    currentList: [],\r\n    currentTitle: \"\",\r\n    currentDescription: \"\",\r\n    currentImage: \"\",\r\n    currentId: 0,\r\n    currentIndex:0,\r\n   \r\n    currentMode:\"\",\r\n    updateInfoHandler: (list, title, description, image, id) => { },\r\n    resetFlashCardMode:()=>{},\r\n    previousItemHandler:()=>{},\r\n    nextItemHandler:()=>{},\r\n    flipHandler:()=>{},\r\n    changeCurrentItem:()=>{}\r\n});//returns a react component \r\n\r\n\r\n\r\n//main react wrapper class \r\nexport const CurrentSetContextProvider = (props) => {\r\n    const [currentList, setCurrentList] = usePersistedState(\"list\", []);\r\n\r\n    const [currentTitle, setCurrentTitle] = usePersistedState(\"title\", \"\");\r\n    const [currentDescription, setCurrentDescription] = usePersistedState(\"description\", \"\");\r\n    const [currentImage, setCurrentImage] = usePersistedState(\"image\", \"\");\r\n    const [currentId, setCurrentId] = usePersistedState(\"id\", 0);\r\n    const [currentIndex,setCurrentIndex]=usePersistedState(\"index\",0);\r\n    \r\n    const [currentMode,setCurrentMode]=usePersistedState(\"mode\",\"term\");\r\n\r\n\r\n\r\n\r\n\r\n    const updateInfoHandler = (list, title, description, image, id) => {\r\n\r\n        console.log(\"Update info\");\r\n\r\n        setCurrentList(list);\r\n        setCurrentTitle(title);\r\n        setCurrentDescription(description);\r\n        setCurrentImage(image);\r\n        setCurrentId(id);\r\n\r\n        // window.localStorage.setItem('currentList',list);\r\n        // window.localStorage.setItem('currentTitle',title);\r\n        // window.localStorage.setItem('currentDescription',description);\r\n        // window.localStorage.setItem('currentImage',image);\r\n        // window.localStorage.setItem('currentId',id);\r\n        console.log(currentList);\r\n        console.log(currentId);\r\n\r\n    };\r\n\r\n    const resetFlashCardMode=()=>{\r\n        setCurrentIndex(0);\r\n    \r\n        setCurrentMode(\"term\");\r\n    }\r\n\r\n \r\n\r\n    const nextItemHandler=()=>{\r\n        setCurrentIndex((prevCount)=>{\r\n            if(prevCount+1<currentList.length){\r\n                return prevCount+1;\r\n            }\r\n            else{\r\n                return prevCount;\r\n            }\r\n           \r\n        });\r\n    }\r\n\r\n    const previousItemHandler=()=>{\r\n        setCurrentIndex((prevCount)=>{\r\n            if(prevCount-1>=0){\r\n                return prevCount-1;\r\n            }\r\n            else{\r\n                return prevCount;\r\n            }\r\n           \r\n        });\r\n    };\r\n\r\n    const flipHandler=()=>{\r\n        setCurrentMode((previousMode)=>{\r\n            if(previousMode===\"term\"){\r\n               return \"definition\";\r\n            }\r\n            else{\r\n               return \"term\";\r\n            }\r\n        })\r\n    };\r\n\r\n    const context = {\r\n        currentList: currentList,\r\n        currentTitle: currentTitle,\r\n        currentDescription: currentDescription,\r\n        currentImage: currentImage,\r\n        currentIndex:currentIndex,\r\n        currentId: currentId,\r\n        currentMode:currentMode,\r\n        updateInfoHandler: updateInfoHandler,\r\n        resetFlashCardMode:resetFlashCardMode,\r\n        nextItemHandler:nextItemHandler,\r\n        previousItemHandler:previousItemHandler,\r\n        flipHandler:flipHandler,\r\n       \r\n    };\r\n\r\n    return <CurrentSetContext.Provider value={context}>\r\n        {props.children}\r\n    </CurrentSetContext.Provider>\r\n}\r\n","import React from 'react'\nimport classes from './StudySetItem.module.css'\nimport { useContext } from 'react'\nimport Card from '../ui/Card'\nimport { Link } from 'react-router-dom'\nimport { FavoritesContext } from '../../storage/favorites-context'\nimport Delete from '../ui/Delete'\nimport { useHistory } from 'react-router'\nimport { isLoadingContext } from '../../pages/AllStudySets'\nimport { IoMdCheckmarkCircle } from \"react-icons/io\"\nimport { CurrentSetContext } from '../../storage/current-set-context'\n\nconst StudySetItem = (props) => {\n    const history = useHistory() //might not need it\n    const favoritesCtx = useContext(FavoritesContext);\n    const isLoadingCtx = useContext(isLoadingContext);\n    const currentSetCtx = useContext(CurrentSetContext);\n    const itemIsFavorite = favoritesCtx.itemIsFavorite(props.id); //if a study set is set as favorite by the user \n\n\n\n    const toggleFavoriteStatusHandler = () => {\n        if (itemIsFavorite) {\n            favoritesCtx.removeFavorite(props.id);\n\n        }\n        else {\n            favoritesCtx.addFavorite({\n                id: props.id,\n                title: props.title,\n                description: props.description,\n                image: props.image,\n\n            })\n        }\n    }\n\n\n    const deleteHandler = (id) => {\n\n        fetch(`https://react-meetup-a340c-default-rtdb.firebaseio.com/study-sets/${id}.json`, { method: 'Delete' })\n            .then(response => response.json())\n            .then(data => {\n                console.log(data);\n                isLoadingCtx.onDelete(); //rerender the list after deletion\n\n            })\n    }\n\n\n    return (\n        <li className={classes.item}>\n            <Card>\n                <div className={classes.image}>\n                    {/* use the image if there's one, otherwise use the default icon  */}\n                    {props.image ? <img src={props.image} alt={props.title}></img> : <IoMdCheckmarkCircle className={classes.altImg}></IoMdCheckmarkCircle>}\n\n                </div>\n                <div className={classes.content}>\n                    <h3>{props.title}</h3>\n                    <p>{props.description}</p>\n                </div>\n\n                <div className={classes.buttonGroup}>\n\n\n                    <div className={classes.actions} onClick={() => { currentSetCtx.resetFlashCardMode(); currentSetCtx.updateInfoHandler(props.list, props.title, props.description, props.image, props.id); }}>\n\n                        <Link to={{\n                            pathname: \"/viewset\",\n                            state: {\n\n                                title: props.title,\n                                list: props.list,\n                                description: props.description,\n                                image: props.image,\n                                id: props.id\n                            }\n                        }} >\n                            <button> Open</button>\n                        </Link>\n\n                    </div>\n                    <div className={classes.actions}>\n                        <Delete id={props.id} onDelete={deleteHandler}></Delete>\n                    </div>\n\n                    <div className= {`${classes.actions} ${classes.favoriteBtn}`}>\n                        <button onClick={toggleFavoriteStatusHandler}>{itemIsFavorite ? 'Remove from Favorites' : 'To Favorites'}</button>\n                    </div>\n                </div>\n\n\n            </Card>\n\n\n        </li>\n\n    )\n}\n\nexport default StudySetItem\n","import React from 'react'\nimport StudySetItem from './StudySetItem'\nimport classes from './StudySetList.module.css'\n\n//css modules:https://css-tricks.com/css-modules-part-1-need/ \n\nconst StudySetList = (props) => {\n    return (\n\n        <ul className={classes.list}>\n            {props.studysets.length>0?props.studysets.map(studyset => <StudySetItem key={studyset.id} id={studyset.id} image={studyset.image} title={studyset.title} description={studyset.description} list={studyset.list} />):\"You don't have a study set. Go create one.\"}\n            \n        </ul>\n    )\n}\n\nexport default StudySetList\n","import React from 'react'\nimport { useContext } from 'react'\n\nimport { FavoritesContext } from '../storage/favorites-context'\nimport StudySetList from '../components/StudySets/StudySetList'\n\n//note the elements are not permernant, meaning that if we refresh that page, they're gone. \n//because we didn't store the favorites in a database or local storage.\n//TODO: try storing it in server  \nconst FavoritesPage = () => {\n\n    const favoritesCtx=useContext(FavoritesContext);\n    let content;\n\n    if(favoritesCtx.totalFavorites===0){\n        content=<p>You got no favorites yet. Start adding some?</p>\n    }\n    else{\n        content=<StudySetList studysets={favoritesCtx.favorites}></StudySetList>\n    }\n    return (\n       <section>\n\n           <h1>My Favorites</h1>\n           {content}\n       </section>\n    )\n}\n\nexport default FavoritesPage","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport classes from './MainNavigation.module.css'\nimport { useContext } from 'react'\nimport { FavoritesContext } from '../../storage/favorites-context'\n\nconst MainNavigation = () => {\n    const favoritesCtx=useContext(FavoritesContext)\n    return (\n        // The <header> element represents a container for introductory content or a set of navigational links.\n       <header className={classes.header}>\n\n           <div className={classes.logo}>Flashtastic</div>\n           <nav>\n               <ul>\n                   <li>\n                       <Link to='/'>All Study Sets</Link>\n                   </li>\n\n                   <li>\n                       <Link to='/new-set'>Create New Study Set</Link>\n                   </li>\n\n                   <li>\n                       <Link to='/favorites'>My Favorites\n                        <span className={classes.badge}>{favoritesCtx.totalFavorites}</span>\n                       </Link>\n                   </li>\n               </ul>\n           </nav>\n       </header>\n    )\n}\n\nexport default MainNavigation\n","import React from 'react'\nimport classes from './Layout.module.css'\nimport MainNavigation from './MainNavigation'\n\nconst Layout = (props) => {\n    return (\n        <div>\n             <MainNavigation></MainNavigation>\n             <main className={classes.main}>\n                {props.children}\n                 {/* where the main content goes */}\n             </main>\n        </div>\n    )\n}\n\nexport default Layout\n","import React from 'react';\nimport Card from '../ui/Card';\nimport classes from './FlashcardForm.module.css';\nimport { useState } from 'react';\nconst FlashcardForm = (props) => {\n\n    const list = props.list; //input list passed from the parents, could be empty if creating a new form \n    const title = props.title;\n    const imgurl = props.imgurl;\n    const description = props.description;\n    const id = props.id;\n    const [inputList, setInputList] = useState(list ? list : [{ term: \"\", definition: \"\" }]);\n    const [titleInput, setTitleInput] = useState(title ? title : '');\n    const [imageInput, setImageInput] = useState(imgurl ? imgurl : '');\n    const [descriptionInput, setDescriptionInput] = useState(description ? description : '');\n\n\n    // handle input change\n    const handleInputChange = (e, index) => {\n        const { name, value } = e.target; //name->select term or def, value -> the actual value \n        console.log(\"Name: \", name);\n        console.log(\"Value: \", value);\n        const list = [...inputList];\n        list[index][name] = value;\n        setInputList(list);\n    };\n\n    // handle click event of the Remove button\n    const handleRemoveClick = index => {\n        const list = [...inputList];\n        list.splice(index, 1);\n        setInputList(list);\n    };\n\n    // handle click event of the Add button\n    const handleAddClick = () => {\n        setInputList([...inputList, { term: \"\", definition: \"\" }]);\n    };\n\n    \n    //handle form submit (save button click)\n    const submitHandler = (e) => {\n        e.preventDefault();\n\n        // const enteredTitle = titleInputRef.current.value;\n        // const enteredImage = imageInputRef.current.value;\n        // const enteredDescription = descriptionInputRef.current.value;\n\n        const setData = {\n            title: titleInput,\n            image: imageInput,\n            description: descriptionInput,\n            list: inputList\n        }\n\n        props.onAddSet(setData, id) //send to backend \n    }\n    return (\n\n        <Card>\n            <form className={classes.form} onSubmit={submitHandler}>\n                <div className={classes.control}>\n                    <label htmlFor=\"title\">Set Name</label>\n                    <input type='text' placeholder='Create a name for your study set' required id='title' value={titleInput} onChange={(e) => setTitleInput(e.target.value)}></input>\n\n                </div>\n                {/* TODO: can try out file upload later  */}\n                <div className={classes.control}>\n                    <label htmlFor=\"image\"> Set Image</label>\n                    <input type='url' id='image' placeholder='Enter the url for your chosen image for the study set (optional)' value={imageInput} onChange={(e) => setImageInput(e.target.value)}></input>\n\n                </div>\n\n                <div className={classes.control}>\n                    <label htmlFor=\"description\"> Description</label>\n                    <textarea id='description' placeholder='Say something about the study set (optional)' rows='5' value={descriptionInput} onChange={(e) => setDescriptionInput(e.target.value)}></textarea>\n                    <br></br>\n                    <label htmlFor='termDefs'>Please enter your terms and definitions below:</label>\n\n                </div>\n\n\n\n\n\n                <div id='termDefs'>\n\n                    {/* citation:https://www.cluemediator.com/add-or-remove-input-fields-dynamically-with-reactjs */}\n                    {/* for the flashcard items  */}\n                    {inputList.map((x, i) => {\n                        return (\n                            <div className={classes.control}>\n                                <div className={classes.counter}>{i + 1}</div>\n                                <hr></hr>\n                                <input type='text' name='term' placeholder='Enter term' id={`term${i}`} value={x.term} required onChange={e => handleInputChange(e, i)}></input>\n\n                                <input type='text' name='definition' placeholder='Enter definition' id={`definition${i}`} value={x.definition} required onChange={e => handleInputChange(e, i)}></input>\n                                <br></br>\n                                <div className={classes.buttonBox}>\n                                    {inputList.length !== 1 && <button className={classes.removeButton} onClick={() => handleRemoveClick(i)}>Remove</button>}\n                                    {/* only display the add button at the last item  */}\n                                    {inputList.length - 1 === i && <button className={classes.addButton} onClick={handleAddClick}>Add</button>}\n                                </div>\n\n                            </div>\n\n\n                        )\n                    })}\n                </div>\n\n\n\n\n                <div className={classes.actions}>\n                    {/* <button onClick={submitHandler}>Save</button> */}\n                    <input type='submit' value='Save' className={classes.submitButton}></input>\n                </div>\n\n\n            </form>\n        </Card>\n\n\n\n\n    )\n}\n\nexport default FlashcardForm\n","import React from 'react'\nimport FlashcardForm from '../components/StudySets/FlashcardForm'\nimport { useHistory } from 'react-router' //used to manipulate browser history \n\nconst NewSetPage = () => {\n    const history=useHistory();\n    const addMeetupHandler=(setData,id=undefined)=>{\n        fetch(\"https://react-meetup-a340c-default-rtdb.firebaseio.com/study-sets.json\",\n        {\n            method:'POST',\n            body:JSON.stringify(setData),\n            headers:{\n                'Content-Type':'application/json'\n            }\n\n        }\n        ).then(()=>{\n            alert(\"Study set successfully added!\")\n            history.replace('/'); //navigate to the homepage \n        })\n    \n    }\n    return (\n      <section>\n\n          <h1>Add New Set</h1>\n          <FlashcardForm onAddSet={addMeetupHandler}></FlashcardForm>\n      </section>\n    )\n}\n\nexport default NewSetPage\n","import React, { useContext } from 'react'\r\nimport { useLocation } from 'react-router'\r\nimport classes from './ViewSet.module.css'\r\nimport { Link } from 'react-router-dom'\r\nimport { CurrentSetContext } from '../../storage/current-set-context'\r\nimport { FavoritesContext } from '../../storage/favorites-context'\r\n\r\nconst ViewSet = () => {\r\n    //let itemList=props.items //list of terms and definition pairs\r\n    const { state } = useLocation();\r\n    const currentSetCtx=useContext(CurrentSetContext);\r\n    const favoritesCtx=useContext(FavoritesContext);\r\n    // console.log(state.list);\r\n    // const list = state.list;\r\n    // const title = state.title;\r\n    // const description = state.description;\r\n    // const image = state.image;\r\n    // const id = state.id;\r\n\r\n    //render using react context \r\n    const list=currentSetCtx.currentList\r\n    const title=currentSetCtx.currentTitle;\r\n    const description=currentSetCtx.currentDescription;\r\n    const image=currentSetCtx.currentImage;\r\n    const id=currentSetCtx.currentId;\r\n\r\n    console.log(currentSetCtx);\r\n   \r\n    return (\r\n\r\n     \r\n        <div>\r\n            <div className={classes.termTable}>\r\n\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th >Term</th>\r\n                            <th>Definition</th>\r\n                        </tr>\r\n                    </thead>\r\n\r\n                    <tbody>\r\n                        {list.map((x, i) => {\r\n                            return (\r\n\r\n                                <tr>\r\n\r\n                                    <td>{x.term}</td>\r\n                                    <td>{x.definition}</td>\r\n                                </tr>\r\n                            )\r\n                        })}\r\n\r\n                    </tbody>\r\n\r\n\r\n                </table>\r\n\r\n            </div>\r\n\r\n            <div className={classes.actions}>\r\n                <Link to={{\r\n                    pathname: '/editset',\r\n                    state: {\r\n                        list: list,\r\n                        title: title,\r\n                        description: description,\r\n                        image: image,\r\n                        id: id\r\n                    }\r\n                }}>\r\n                    <button className={classes.editBtn}> Edit Set</button>\r\n                </Link>\r\n\r\n                <Link to={\r\n                    {\r\n                        pathname: '/flashcardMode',\r\n                        state: {\r\n                            list: list\r\n                        }\r\n                    }\r\n                }>\r\n\r\n                    <button className={classes.studyBtn}> Study Set</button>\r\n                </Link>\r\n\r\n            </div>\r\n\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default ViewSet\r\n","import React from 'react';\r\nimport FlashcardForm from '../components/StudySets/FlashcardForm';\r\nimport { useHistory, useLocation } from 'react-router'; //used to manipulate browser history \r\nimport { CurrentSetContext } from '../storage/current-set-context';\r\nimport { useContext } from 'react';\r\n\r\nconst EditSetPage = () => {\r\n    const history=useHistory();\r\n   \r\n\r\n    const currentSetCtx=useContext(CurrentSetContext);\r\n    const list=currentSetCtx.currentList;\r\n    const title=currentSetCtx.currentTitle;\r\n    const description=currentSetCtx.currentDescription;\r\n    const image=currentSetCtx.currentImage;\r\n    const id=currentSetCtx.currentId;\r\n\r\n    const editMeetupHandler=(setData,id)=>{\r\n      \r\n      fetch(`https://react-meetup-a340c-default-rtdb.firebaseio.com/study-sets/${id}.json`,{\r\n          method:'PUT',\r\n          headers:{\r\n            'Content-type': 'application/json'\r\n          },\r\n          body:JSON.stringify(setData)\r\n\r\n      }).then(\r\n          (response)=>{\r\n              alert(\"Edit successful!\");\r\n              history.replace('/'); //navigate back to homepage\r\n          }\r\n      )\r\n      \r\n    }\r\n\r\n \r\n\r\n    \r\n    return (\r\n      <section>\r\n\r\n          <h1>Edit Set</h1>\r\n          <FlashcardForm onAddSet={editMeetupHandler} list={list} title={title} id={id} description={description} imgurl={image} ></FlashcardForm>\r\n      </section>\r\n    )\r\n}\r\n\r\nexport default EditSetPage\r\n","import React, { useContext, useEffect } from 'react'\r\nimport './FlashcardModeKernel.css';\r\nimport usePersistedState from '../../storage/customHooks';\r\nimport { CurrentSetContext } from '../../storage/current-set-context';\r\nimport { isLoadingContext } from '../../pages/AllStudySets';\r\n\r\nconst FlashcardModeKernel = () => {\r\n\r\n    const currentSetCtx = useContext(CurrentSetContext);\r\n\r\n\r\n    const currentIndex = currentSetCtx.currentIndex;\r\n    const currentData = currentSetCtx.currentList;\r\n    const currentMode = currentSetCtx.currentMode;\r\n\r\n\r\n    // console.log(currentData);\r\n\r\n    //  console.log(currentIndex);\r\n\r\n\r\n    const currentItem = currentSetCtx.currentList[currentIndex];\r\n\r\n    // console.log(currentItem);\r\n\r\n    // console.log(currentMode);\r\n\r\n\r\n    const flipCardAnimation=()=>{\r\n        document.getElementsByClassName('card')[0].classList.toggle('is-flipped');\r\n    }\r\n\r\n    return (\r\n\r\n        //citation:https://3dtransforms.desandro.com/card-flip\r\n        <div className='cardScene'>\r\n\r\n            <div className='card' onClick={()=>{flipCardAnimation();}}>\r\n                <div className='cardFace cardFaceFront'>\r\n                    <a className='displayArea'><p>{currentItem['term']}</p></a>\r\n                </div>\r\n                <div className='cardFace cardFaceBack'>\r\n\r\n                    <a className='displayArea'><p>{currentItem['definition']}</p></a>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n            <div className='actionCenter'>\r\n\r\n                <a className='previousBtn' title=\"previous\" onClick={() => { currentSetCtx.previousItemHandler(); }}> &#10094; </a>\r\n                <button className='flipBtn' onClick={() => {flipCardAnimation(); }} > Flip Card</button>\r\n                <a className='nextBtn' title=\"next\" onClick={() => { currentSetCtx.nextItemHandler(); }}>&#10095;</a>\r\n\r\n\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FlashcardModeKernel\r\n","import React,{useContext} from 'react'\r\n\r\nimport { useHistory, useLocation } from 'react-router';\r\nimport FlashcardModeKernel from '../components/StudySets/FlashcardModeKernel';\r\nimport { CurrentSetContext } from '../storage/current-set-context';\r\nconst FlashcardMode = () => {\r\n\r\n    const history = useHistory();\r\n    const currentSetCtx=useContext(CurrentSetContext);\r\n    const data = currentSetCtx.currentList;\r\n    console.log(\"Data: \", data);\r\n\r\n    return (\r\n\r\n\r\n        <FlashcardModeKernel>\r\n\r\n           \r\n        </FlashcardModeKernel>\r\n\r\n\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default FlashcardMode\r\n","import { Route, Switch } from 'react-router-dom' //parse different paths, switch tells the browser only one route should be active \nimport FavoritesPage from './pages/Favorites';\nimport MainNavigation from './components/layout/MainNavigation';\nimport Layout from './components/layout/Layout';\nimport NewSetPage from './pages/NewSet';\nimport ViewSet from './components/StudySets/ViewSet';\nimport AllStudySetsPage from './pages/AllStudySets';\nimport EditSetPage from './pages/EditSet';\nimport FlashcardMode from './pages/FlashcardMode';\nfunction App() {\n  return (\n    <Layout>\n\n      <Switch>\n        {/* if we don't add the exact keyword the browser would stop at the first route every time */}\n        <Route exact path='/'>\n          <AllStudySetsPage></AllStudySetsPage>\n\n        </Route>\n        <Route path='/new-set'>\n          <NewSetPage></NewSetPage>\n        </Route>\n\n        <Route path='/favorites'>\n          <FavoritesPage></FavoritesPage>\n        </Route>\n\n        <Route path='/viewset'>\n          <ViewSet></ViewSet>\n        </Route>\n\n        <Route path='/editset'>\n          <EditSetPage></EditSetPage>\n        </Route>\n\n        <Route path='/flashcardMode'>\n          <FlashcardMode></FlashcardMode>\n        </Route>\n\n      </Switch>\n\n    </Layout>\n\n\n\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter, HashRouter } from 'react-router-dom'\nimport { FavoritesContextProvider } from './storage/favorites-context'\nimport { CurrentSetContextProvider } from './storage/current-set-context';\n\n\n\nReactDOM.render(\n\n\n\n  <FavoritesContextProvider>\n    <CurrentSetContextProvider>\n\n      <HashRouter >\n        <App />\n      </HashRouter>\n    </CurrentSetContextProvider>\n  </FavoritesContextProvider>\n\n\n\n\n\n  ,\n  document.getElementById('root')\n);\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"FlashcardForm_form__wRPwI\",\"control\":\"FlashcardForm_control__Bb0eW\",\"counter\":\"FlashcardForm_counter__2jXjK\",\"actions\":\"FlashcardForm_actions__3gri3\",\"removeButton\":\"FlashcardForm_removeButton__1Thy9\",\"addButton\":\"FlashcardForm_addButton__1cLIX\",\"submitButton\":\"FlashcardForm_submitButton__3rrQ8\"};"],"sourceRoot":""}